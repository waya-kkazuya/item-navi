name: EMS Deploy Pipeline
on:
  pull_request:  #プルリクのマージ時自動デプロイ
    types: [closed]
    branches: 
      - main
    paths:
      - '**'
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: my-portfolio-cluster
  ECS_SERVICE: my-portfolio
  ECS_REPOSITORY: my-portfolio
  ECS_TASK_DEFINITION_API: .aws/task-def-portfolio.json

permissions:
  id-token: write
  contents: read

jobs:
# Build
  build-and-push:
    if: github.event.pull_request.merged == true
    # if: |
    #   github.event.pull_request.merged == true && 
    #   contains(github.event.pull_request.labels.*.name, 'deploy') &&
    #   !contains(github.event.pull_request.title, '[skip ci]')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      # Checkout code
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create .env file
        run: |
          cp .env.example .env
          
          # APPの設定
          # APP_KEYは、イメージビルド時に「php artisan key:generate」を行う
          echo "APP_NAME=EMS" >> .env
          echo "APP_ENV=production" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "APP_URL=${{ secrets.PROD_APP_URL }}" >> .env
          echo "APP_PORT=80" >> .env

          # DBの設定
          # AWSから直接取得
          SECRET=$(aws secretsmanager get-secret-value \
            --secret-id portfolio-rds-credentials \
            --region ap-northeast-1 \
            --query SecretString \
            --output text)
          
          db_host=$(echo $SECRET | jq -r '.host')
          db_password=$(echo $SECRET | jq -r '.password')
          db_username=$(echo $SECRET | jq -r '.username')
          db_database=$(echo $SECRET | jq -r '.database')
          
          echo "DB_HOST=$db_host" >> .env
          echo "DB_PASSWORD=$db_password" >> .env
          echo "DB_USERNAME=$db_username" >> .env
          echo "DB_DATABASE=$db_database" >> .env
          

          # セッションの設定
          echo "SESSION_DOMAIN=${{ secrets.PROD_SESSION_DOMAIN }}" >> .env

          # ファイルシステムをs3に変更する設定
          echo "FILESYSTEM_DISK=s3" >> .env
          echo "AWS_DEFAULT_REGION=${{ secrets.PROD_AWS_DEFAULT_REGION }}" >> .env
          echo "AWS_BUCKET=${{ secrets.PROD_AWS_BUCKET }}" >> .env

          # ログの設定
          echo "LOG_SLACK_WEBHOOK_URL=${{ secrets.PROD_LOG_SLACK_WEBHOOK_URL }}" >> .env

          # VITEの環境変数の設定URL
          echo "VITE_API_BASE_URL=${{ secrets.PROD_VITE_API_BASE_URL }}" >> .env
          echo "VITE_APP_URL=${{ secrets.PROD_VITE_APP_URL }}" >> .env

          # SANCTUMの設定
          echo "SANCTUM_STATEFUL_DOMAINS=${{ secrets.PROD_SANCTUM_STATEFUL_DOMAINS }}" >> .env

          # s3
          echo "S3_BUCKET_URL=${{ secrets.PROD_S3_BUCKET_URL }}" >> .env

          # Userパスワード
          echo "GUEST_PASSWORD=${{ secrets.PROD_GUEST_PASSWORD }}" >> .env
          echo "ADMIN_PASSWORD=${{ secrets.PROD_ADMIN_PASSWORD }}" >> .env
          echo "STAFF_PASSWORD=${{ secrets.PROD_STAFF_PASSWORD }}" >> .env
          echo "USER_PASSWORD=${{ secrets.PROD_USER_PASSWORD }}" >> .env

      - name: Build Image
        run: docker image build -t temp_portfolio_image:latest .

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker image tag temp_portfolio_image:latest $ECR_REGISTRY/$ECS_REPOSITORY:${{ github.sha }}
          docker image push $ECR_REGISTRY/$ECS_REPOSITORY:${{ github.sha }}
          echo $ECR_REGISTRY/$ECS_REPOSITORY:${{ github.sha }} > portfolio-image-uri.txt

      - name: Upload the image uri file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-image-uri
          path: portfolio-image-uri.txt

# Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: portfolio-image-uri
          path: artifacts

      - name: Define the image URI
        run: |
          echo "API_IMAGE_URI=$(cat artifacts/portfolio-image-uri.txt)" >> $GITHUB_ENV

      - name: Fill in the new image URI in the amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_API }}
          container-name: portfolio-app-container
          image: ${{ env.API_IMAGE_URI }}

      - name: Deploy ECS task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true